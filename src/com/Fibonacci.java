package com;

import java.util.ArrayList;
import java.util.HashSet;

public class Fibonacci {
	static int sum = 0;
	static int TruePrev = 0;
	static int prevNum = 0;
	static int number = 1;
	static int FINAL_NUMBER = 10;
	static ArrayList<Integer> sequence = new ArrayList<Integer>();
	static HashSet<Integer> sequenceSet = new HashSet<Integer>();

	/*
	 * Each new term in the Fibonacci sequence is generated by adding the
	 * previous two terms. By starting with 1 and 2, the first 10 terms will be:
	 * 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
	 * 
	 * By considering the terms in the Fibonacci sequence whose values do not
	 * exceed four million, find the sum of the even-valued terms.
	 */
	public static void main(String[] args) {
		getSeq();
		System.out.println(sum);

	}

	public static void Hash() {
		sequenceSet.addAll(sequence);
		for (int key : sequenceSet) {
			sum += key;
		}
	}

	public static void getSeq() {
		for (int i = 0; i < FINAL_NUMBER; i++) {
			prevNum = number;
			sequence.add(number += TruePrev);
			TruePrev = prevNum;
		}
		Hash();
	}

}
